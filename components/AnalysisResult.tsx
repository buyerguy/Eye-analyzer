
import React, { useState } from 'react';
import type { IrisAnalysis } from '../types';
import AnalysisCard from './AnalysisCard';
import RarityMeter from './RarityMeter';
import { 
    IconDna, IconShield, IconFingerprint, IconGlobe, IconSparkles, IconEye, 
    IconArrowLeft, IconShare, IconSave, IconPatternTag, IconBarChart, 
    IconMapPin, IconGeneticProbability, IconHeart, IconZap, IconTrendingDown, IconActivity
} from './IconComponents';
import PatternInfoModal from './PatternInfoModal';
import { ShareModal } from './ShareModal';

interface AnalysisResultProps {
  result: IrisAnalysis;
  imageSrc: string;
  onReset: () => void;
  setInfoModalContent: (content: {title: string, message: string} | null) => void;
}

const getIndicatorStyle = (name: string) => {
    const lowerName = name.toLowerCase();
    if (lowerName.includes('stress')) {
        return { icon: <IconZap className="w-7 h-7" />, color: 'text-yellow-500 dark:text-yellow-400' };
    }
    if (lowerName.includes('fatigue') || lowerName.includes('energy')) {
        return { icon: <IconTrendingDown className="w-7 h-7" />, color: 'text-blue-500 dark:text-blue-400' };
    }
    if (lowerName.includes('vitality') || lowerName.includes('constitution')) {
        return { icon: <IconActivity className="w-7 h-7" />, color: 'text-green-500 dark:text-green-400' };
    }
    if (lowerName.includes('pressure') || lowerName.includes('circulation')) {
        return { icon: <IconHeart className="w-7 h-7" />, color: 'text-red-600 dark:text-red-500' };
    }
    return { icon: <IconShield className="w-7 h-7" />, color: 'text-gray-500 dark:text-gray-400' };
};

const getLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
        case 'high':
            return 'text-red-600 border-red-500 bg-red-500/10 dark:text-red-400 dark:border-red-400';
        case 'moderate':
            return 'text-yellow-600 border-yellow-500 bg-yellow-500/10 dark:text-yellow-400 dark:border-yellow-400';
        case 'low':
            return 'text-green-600 border-green-500 bg-green-500/10 dark:text-green-400 dark:border-green-400';
        default:
            return 'text-gray-600 border-gray-500 bg-gray-500/10 dark:text-gray-300 dark:border-gray-300';
    }
}

const AnalysisResult: React.FC<AnalysisResultProps> = ({ result, imageSrc, onReset, setInfoModalContent }) => {
  const [selectedPattern, setSelectedPattern] = useState<{ name: string; description: string; } | null>(null);
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const { ancestry, ...restOfResult } = result;

  const cardData = [
    { icon: <IconShield className="w-8 h-8" />, data: restOfResult.healthClues },
    { icon: <IconFingerprint className="w-8 h-8" />, data: restOfResult.biometricSignature },
    { icon: <IconSparkles className="w-8 h-8" />, data: restOfResult.personalityVibe },
    { icon: <IconEye className="w-8 h-8" />, data: restOfResult.pigmentOddities },
  ];

  const handleSave = () => {
    let reportContent = `Iris Analyzer Analysis
================================
Date: ${new Date().toLocaleString()}`;

    // 1. Unique Patterns
    if (result.uniquePatterns && result.uniquePatterns.length > 0) {
      reportContent += `

--- Unique Patterns Detected ---
${result.uniquePatterns.map(p => `\n* ${p.name}\n  ${p.description}`).join('')}
`;
    }

    // Health Indicators
    if (result.healthIndicators && result.healthIndicators.length > 0) {
        reportContent += `

--- Health Indicators ---
${result.healthIndicators.map(h => `\n* ${h.name} (${h.level})\n  ${h.description}`).join('')}
`;
    }

    // 2. Metrics
    reportContent += `

--- Metrics ---
Rarity Score: ${100 - result.rarityIndex.percentage}/100
Ancestry - Global Prevalence: ${result.ancestry.metrics.globalPrevalence}
Ancestry - Regional Hotspots: ${result.ancestry.metrics.regionalHotspots.join(', ')}
Ancestry - Genetic Probability: ${result.ancestry.metrics.geneticProbability}
`;

    // 3. All findings/insights
    reportContent += `

--- All Findings & Insights ---

[${result.dominantColor.name} - Color Profile]
Confidence: ${result.dominantColor.confidence}%
Hex Code: ${result.dominantColor.hexCode}
Color Composition:
${result.colorComposition.map(c => `  - ${c.colorName} (${c.hexCode}): ${c.percentage}%`).join('\n')}

[${result.rarityIndex.title}]
${result.rarityIndex.description}

[${result.ancestry.title}]
${result.ancestry.description}

[${result.healthClues.title}]
${result.healthClues.description}

[${result.biometricSignature.title}]
${result.biometricSignature.description}

[${result.personalityVibe.title}]
${result.personalityVibe.description}

[${result.pigmentOddities.title}]
${result.pigmentOddities.description}
`;
    
    // 4. Footer
    reportContent += `

================================
Generated by Iris Analyzer. For entertainment purposes only.
`;
    
    const blob = new Blob([reportContent.trim()], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `iris-analysis-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };
  
  const onShareComplete = () => {
    setIsShareModalOpen(false);
    setInfoModalContent({
        title: "Shared Successfully!",
        message: "Your analysis has been shared. Why not tag a friend to see how their eyes compare?"
    });
  };

  return (
    <div className="animate-slide-in-up w-full">
      <header className="text-center mb-8">
        <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 dark:text-white">Your Iris Analysis</h1>
        <p className="mt-2 text-lg text-gray-600 dark:text-gray-300">Here's what our AI discovered in your eye.</p>
      </header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column: Image and Rarity */}
        <div className="lg:col-span-1 flex flex-col gap-6">
          <div className="bg-white dark:bg-white/10 p-5 rounded-xl border border-gray-200 dark:border-white/20 flex flex-col items-center justify-center shadow-md dark:shadow-none">
            <img 
              src={imageSrc} 
              alt="Analyzed eye" 
              className="w-48 h-48 rounded-full object-cover border-4 border-brand-teal shadow-lg"
            />
            <p className="mt-4 text-gray-500 dark:text-gray-400 text-sm">Your unique iris</p>
          </div>
          
          {result.uniquePatterns && result.uniquePatterns.length > 0 && (
            <div className="bg-white dark:bg-white/10 p-5 rounded-xl border border-gray-200 dark:border-white/20 shadow-md dark:shadow-none">
              <div className="flex items-center gap-3 mb-4">
                <IconFingerprint className="w-6 h-6 text-gray-800 dark:text-white/80" />
                <h3 className="text-xl font-bold text-gray-800 dark:text-white">Unique Patterns Detected</h3>
              </div>
              <div className="flex flex-wrap items-center gap-2">
                {result.uniquePatterns.map((pattern, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedPattern(pattern)}
                    className="bg-brand-purple/80 hover:bg-brand-purple text-white font-semibold py-1.5 px-3 rounded-full text-sm inline-flex items-center gap-2 transition-all transform hover:scale-105"
                  >
                    <IconPatternTag className="w-4 h-4"/>
                    {pattern.name}
                  </button>
                ))}
                <span className="text-gray-700 dark:text-white text-xs ml-2 animate-pulse">click here</span>
              </div>
            </div>
          )}

          <RarityMeter 
            icon={<IconGlobe className="w-8 h-8"/>} 
            title={result.rarityIndex.title}
            description={result.rarityIndex.description}
            percentage={result.rarityIndex.percentage}
          />
        </div>

        {/* Right Column: Analysis Cards */}
        <div className="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white dark:bg-white/10 backdrop-blur-sm p-5 rounded-xl border border-gray-200 dark:border-white/20 flex flex-col shadow-md dark:shadow-none">
                <div className="flex items-center gap-4">
                    <div className="text-brand-teal"><IconDna className="w-8 h-8" /></div>
                    <h3 className="text-xl font-bold text-gray-800 dark:text-white">{ancestry.title}</h3>
                </div>
                <p className="text-gray-600 dark:text-gray-300 mt-3 text-base">{ancestry.description}</p>
                {ancestry.metrics && (
                    <div className="mt-4 pt-4 border-t border-gray-200 dark:border-white/10">
                        <h4 className="flex items-center gap-2 text-sm font-bold text-gray-800 dark:text-white mb-3">
                            <IconBarChart className="w-5 h-5" />
                            Metrics
                        </h4>
                        <ul className="space-y-2 text-sm">
                            <li className="flex justify-between items-center">
                                <span className="flex items-center gap-2 text-gray-600 dark:text-gray-300"><IconGlobe className="w-4 h-4" /> Global Prevalence:</span>
                                <span className="font-bold text-gray-800 dark:text-white">{ancestry.metrics.globalPrevalence}</span>
                            </li>
                            <li className="flex justify-between items-center">
                                <span className="flex items-center gap-2 text-gray-600 dark:text-gray-300"><IconMapPin className="w-4 h-4" /> Regional Hotspots:</span>
                                <span className="font-bold text-gray-800 dark:text-white">{ancestry.metrics.regionalHotspots.join(', ')}</span>
                            </li>
                            <li className="flex justify-between items-center">
                                <span className="flex items-center gap-2 text-gray-600 dark:text-gray-300"><IconGeneticProbability className="w-4 h-4" /> Genetic Probability:</span>
                                <span className="font-bold text-gray-800 dark:text-white">{ancestry.metrics.geneticProbability}</span>
                            </li>
                        </ul>
                    </div>
                )}
            </div>
          {cardData.map((item, index) => (
            <AnalysisCard key={index} icon={item.icon} title={item.data.title} description={item.data.description} />
          ))}
        </div>
      </div>
      
      {/* Health Indicators Section */}
      {result.healthIndicators && result.healthIndicators.length > 0 && (
        <div className="mt-8">
            <h2 className="text-3xl font-bold text-center text-gray-900 dark:text-white mb-6">Health Indicators</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {result.healthIndicators.map((indicator, index) => {
                    const { icon, color } = getIndicatorStyle(indicator.name);
                    const levelColor = getLevelColor(indicator.level);

                    return (
                        <div key={index} className="bg-white dark:bg-white/10 backdrop-blur-sm p-5 rounded-xl border border-gray-200 dark:border-white/20 h-full flex flex-col text-center items-center shadow-md dark:shadow-none">
                            <div className={color}>
                                {icon}
                            </div>
                            <h3 className="text-xl font-bold text-gray-800 dark:text-white mt-3">{indicator.name}</h3>
                            <p className={`mt-2 text-sm font-semibold uppercase tracking-wider px-2 py-0.5 border rounded-full ${levelColor}`}>{indicator.level}</p>
                            <p className="text-gray-600 dark:text-gray-300 mt-3 text-base flex-grow">{indicator.description}</p>
                        </div>
                    );
                })}
            </div>
             <p className="text-center text-xs text-gray-500 dark:text-gray-400 mt-4">
                Disclaimer: These indicators are for entertainment purposes only and are not medical advice.
            </p>
        </div>
      )}

      <div className="text-center mt-10">
        <div className="flex flex-col sm:flex-row justify-center items-center gap-4">
            <button
              onClick={() => setIsShareModalOpen(true)}
              className="bg-brand-purple hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg inline-flex items-center justify-center gap-2 w-full sm:w-auto"
              aria-label="Share analysis"
            >
              <IconShare className="w-5 h-5" />
              <span>Share</span>
            </button>
            <button
              onClick={handleSave}
              className="bg-brand-purple hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg inline-flex items-center justify-center gap-2 w-full sm:w-auto"
              aria-label="Save analysis text"
            >
              <IconSave className="w-5 h-5" />
              <span>Save</span>
            </button>
            <button
              onClick={onReset}
              className="bg-brand-purple hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg inline-flex items-center justify-center gap-2 w-full sm:w-auto"
              aria-label="Analyze another image"
            >
              <IconArrowLeft className="w-5 h-5" />
              <span>Analyze Another</span>
            </button>
        </div>
      </div>

      {selectedPattern && (
        <PatternInfoModal 
          pattern={selectedPattern}
          onClose={() => setSelectedPattern(null)}
        />
      )}
      
      {isShareModalOpen && (
        <ShareModal
            result={result}
            imageSrc={imageSrc}
            onClose={() => setIsShareModalOpen(false)}
            onShareComplete={onShareComplete}
        />
    )}
    </div>
  );
};

export default AnalysisResult;
